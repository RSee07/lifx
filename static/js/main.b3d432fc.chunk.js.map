{"version":3,"sources":["helpers.js","components/CommandCard.js","constants.js","api.js","components/cards/ToggleCard.js","components/cards/TimerCard.js","App.js","serviceWorker.js","index.js"],"names":["breakpoints","tablet","desktop","largeDesktop","media","Object","keys","reduce","breakpoint","concat","colors","Wrapper","styled","div","_templateObject","CommandCard","props","react_default","a","createElement","children","HEADERS","Authorization","getLightStatus","_ref","asyncToGenerator","regenerator_default","mark","_callee","lightMessage","_lightMessage$data$","power","brightness","_lightMessage$data$$c","hue","saturation","kelvin","wrap","_context","prev","next","axios","get","headers","sent","data","color","abrupt","stop","this","apply","arguments","toggleLight","_ref2","_callee2","_context2","post","turnLightOffTimed","_ref3","_callee3","time","_context3","put","duration","_x","ToggleCard","components_CommandCard","Button","primary","label","onClick","times","5 minutes","10 minutes","15 minutes","20 minutes","25 minutes","30 minutes","TimerCard","_useState","useState","_useState2","slicedToArray","value","setValue","Select","id","name","placeholder","options","onChange","option","GlobalStyle","createGlobalStyle","App_templateObject","theme","select","background","icons","CommandContainer","_templateObject2","App","setLightStatus","_useState3","_useState4","setIsLoading","getInitialLightStatus","useEffect","Grommet","cards_ToggleCard","cards_TimerCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3d432fc.chunk.js","sourcesContent":["/*\n * Breakpoints\n * Mobile first so mobile breakpoint not required\n * \n * Mobile: 0px - 599px\n * Tablet: 600px - 899px\n * Desktop: 900px - 1199px\n * Large Desktop: 1200px+\n */\nconst breakpoints = {\n  tablet: '600px',\n  desktop: '900px',\n  largeDesktop: '1200px',\n}\n\n// Create an object containing all breakpoints\nexport const media = Object.keys(breakpoints).reduce((media, breakpoint) => {\n  media[breakpoint] = `@media (min-width: ${breakpoints[breakpoint]})`\n  return media\n}, {})\n\nexport const colors = {\n  black: '#000000',\n  white: '#FFFFFF',\n  darkGrey: '#202020',\n  lightGrey: '#323232',\n  grommetPurple: '#7D4CDB'\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { colors } from '../helpers'\n\nconst Wrapper = styled.div`\n  width: 100%;\n  padding: 25px 0;\n  background-color: ${colors.lightGrey};\n  border-radius: 5px;\n  box-shadow: 4px 6px 9px 0px rgba(0,0,0,0.75);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst CommandCard = (props) => {\n  return (\n    <Wrapper>\n      {props.children}\n    </Wrapper>\n  )\n}\n\nexport default CommandCard","// Unique authorisation key\nconst API_TOKEN = 'c3388f7729cb9c1364701c49434f6a4e860ec761874ec9d228042afb017a15ae'\n\n// LIFX API Endpoints\nexport const GET_LIGHTS_URL = 'https://api.lifx.com/v1/lights/all' // GET\nexport const TOGGLE_URL = 'https://api.lifx.com/v1/lights/all/toggle' // POST\nexport const SET_STATE_URL = 'https://api.lifx.com/v1/lights/all/state' // PUT\nexport const BREATHE_URL = 'https://api.lifx.com/v1/lights/all/effects/breathe' // POST\n\n// Headers required to access endpoints\nexport const HEADERS = {\n  Authorization: `Bearer ${API_TOKEN}`\n}","import axios from 'axios'\nimport {\n  GET_LIGHTS_URL,\n  TOGGLE_URL,\n  SET_STATE_URL,\n  BREATHE_URL,\n  HEADERS\n} from './constants'\n\nexport const getLightStatus = async () => {\n  const lightMessage = await axios.get(GET_LIGHTS_URL, { headers: HEADERS })\n  const { power, brightness, color: { hue, saturation, kelvin} } = lightMessage.data[0]\n\n  return {\n    power: power === 'on' ? true : false,\n    brightness,\n    hue,\n    saturation,\n    kelvin\n  }\n}\n\nexport const toggleLight = async () => {\n  await axios.post(TOGGLE_URL, null, { headers: HEADERS })\n}\n\nexport const turnLightOffTimed = async (time) => {\n  axios.put(\n    SET_STATE_URL,\n    {\n      power: 'off',\n      duration: time,\n      brightness: 0\n    },\n    { headers: HEADERS }\n  )\n}\n\nexport const breatheLight = async () => {\n  axios.post(\n    BREATHE_URL,\n    {\n      color: '#FF0000'\n    },\n    { headers: HEADERS }\n  )\n}\n","import React from 'react'\nimport { Button } from 'grommet'\nimport CommandCard from '../CommandCard'\nimport { toggleLight } from '../../api'\n\nconst ToggleCard = () => (\n  <CommandCard>\n    <Button\n      primary\n      label='Toggle'\n      onClick={toggleLight}\n    />\n  </CommandCard>\n)\n\nexport default ToggleCard\n","import React, { useState } from 'react'\nimport { Select } from 'grommet'\nimport CommandCard from '../CommandCard'\nimport { turnLightOffTimed } from '../../api'\n\n// Time is in seconds\nconst times = {\n  '5 minutes': 300,\n  '10 minutes': 600,\n  '15 minutes': 900,\n  '20 minutes': 1200,\n  '25 minutes': 1500,\n  '30 minutes': 1800,\n}\n\nconst TimerCard = () => {\n  const [value, setValue] = useState('')\n\n  return (\n    <CommandCard>\n      <Select\n        id='lightSelect'\n        name='lightSelect'\n        placeholder='Timer'\n        value={value}\n        options={Object.keys(times)}\n        onChange={({ option }) => {\n          setValue(option)\n          turnLightOffTimed(times[option])\n        }}\n      />\n    </CommandCard>\n  )\n}\n\nexport default TimerCard\n","import React, { useState, useEffect } from 'react';\n\n// Libs\nimport styled, { createGlobalStyle } from 'styled-components'\nimport { Grommet } from 'grommet'\n\n// Components\nimport ToggleCard from './components/cards/ToggleCard'\nimport TimerCard from './components/cards/TimerCard'\n\n// Helpers\nimport { getLightStatus } from './api'\nimport { media, colors } from './helpers'\n\n// Styled components global styling\nconst GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, *:before, *:after {\n    box-sizing: border-box;\n  }\n\n  body {\n    padding: 0;\n    margin: 0;\n    background-color: ${colors.darkGrey};\n    font-family: 'Poppins', sans-serif;\n  }\n`\n\n// Grommet theme\nconst theme = {\n  select: {\n    background: colors.grommetPurple,\n    icons: {\n      color: colors.white\n    }\n  }\n}\n\nconst CommandContainer = styled.div`\n  margin: 15px;\n  display: grid;\n  grid-template-columns: auto; /* Specify one column */\n  grid-row-gap: 15px;\n\n  ${media.tablet} {\n    grid-template-columns: auto auto; /* Specify two columns */\n    grid-column-gap: 20px;\n  }\n\n  ${media.desktop} {\n    margin: 0 auto;\n    width: 400px;\n    grid-template-columns: auto auto auto; /* Specify three columns */\n  }\n`\n\nconst App = () => {\n  // Define the lightStatus object state\n  const [lightStatus, setLightStatus] = useState({})\n  const [isLoading, setIsLoading] = useState(true)\n\n  const getInitialLightStatus = async () => {\n    // Set the current light status\n    const { power, brightness, hue, saturation, kelvin } = await getLightStatus()\n\n    setLightStatus(\n      {\n        power,\n        brightness,\n        hue,\n        saturation,\n        kelvin\n      }\n    )\n\n    // After the light status has been set, set loading to false\n    setIsLoading(false)\n  }\n  \n  /*\n  * When component mounts and for every render after, run useEffect\n  * Skip an effect if the effect returns nothing\n  * Continuously returns a promise if skipping effect array not added\n  */\n  useEffect(() => {\n    getInitialLightStatus()\n  }, []) // Empty array means effect will only run once\n\n  return (\n    <Grommet theme={theme}\n    >\n      <GlobalStyle /> {/* Handles global styles */}\n      <CommandContainer>\n        <ToggleCard />\n        <TimerCard />\n      </CommandContainer>\n    </Grommet>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}